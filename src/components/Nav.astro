---
import Icon from "./Icon.astro";
import type { iconPaths } from "./IconPaths";

const iconLinks: Array<{
	label: string;
	href: string;
	icon: keyof typeof iconPaths;
}> = [
	{
		label: "LinkedIn",
		href: "https://www.linkedin.com/in/ivan-gonzalez-cabral/",
		icon: "linkedin-logo",
	},
	{
		label: "GitHub",
		href: "https://github.com/sheyko94",
		icon: "github-logo",
	},
	{
		label: "Gmail",
		href: "mailto:ivangonzalezcabral94@gmail.com",
		icon: "envelope",
	},
	{
		label: "CV",
		href: "/cv-embed.html",
		icon: "download",
	},
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
	let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
	if (pathname.at(0) !== "/") pathname = "/" + pathname;
	if (pathname.at(-1) !== "/") pathname += "/";
	return pathname === href || (href !== "/" && pathname.startsWith(href));
};
---

<nav>
	<div class="menu-header">
		<div class="socials">
			{
				iconLinks.map(({ href, icon, label }) =>
					label === "CV" ? (
						<a
							href={href}
							class="social cv-link"
							onclick={`event.preventDefault(); var w = window.open('${href}', '_blank'); w.onload = function() { w.print(); };`}
						>
							<Icon icon={icon} />
							<span class="cv-label">CV</span>
						</a>
					) : (
						<a
							href={href}
							class="social"
							target="_blank"
							rel="noopener noreferrer"
						>
							<Icon icon={icon} />
							<span class="sr-only">{label}</span>
						</a>
					),
				)
			}
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(
				this.querySelector("template")!.content.cloneNode(true),
			);
			const btn = this.querySelector("button")!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById("menu-content")!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add("menu-content");

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute("aria-expanded", expand ? "true" : "false");
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener("click", () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (
				e: MediaQueryList | MediaQueryListEvent,
			) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia("(min-width: 50em)");
			handleViewports(mediaQueries);
			mediaQueries.addEventListener("change", handleViewports);
		}
	}
	customElements.define("menu-button", MenuButton);
</script>
