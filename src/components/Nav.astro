---
import Icon from "./Icon.astro";
import type { iconPaths } from "./IconPaths";

const textLinks: Array<{ label: string; href: string }> = [
	{ label: "Home", href: "/" },
];

const iconLinks: Array<{
	label: string;
	href: string;
	icon: keyof typeof iconPaths;
}> = [
	{
		label: "LinkedIn",
		href: "https://www.linkedin.com/in/ivan-gonzalez-cabral/",
		icon: "linkedin-logo",
	},
	{
		label: "GitHub",
		href: "https://github.com/sheyko94",
		icon: "github-logo",
	},
	{
		label: "Gmail",
		href: "mailto:ivangonzalezcabral94@gmail.com",
		icon: "envelope",
	},
	{
		label: "CV",
		href: "/cv-embed.html",
		icon: "download",
	},
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
	let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
	if (pathname.at(0) !== "/") pathname = "/" + pathname;
	if (pathname.at(-1) !== "/") pathname += "/";
	return pathname === href || (href !== "/" && pathname.startsWith(href));
};
---

<nav>
	<div class="menu-header">
		<div class="socials">
			{
				iconLinks.map(({ href, icon, label }) =>
					label === "CV" ? (
						<a
							href={href}
							class="social cv-link"
							onclick={`event.preventDefault(); var w = window.open('${href}', '_blank'); w.onload = function() { w.print(); };`}
						>
							<Icon icon={icon} />
							<span class="cv-label">CV</span>
						</a>
					) : (
						<a
							href={href}
							class="social"
							target="_blank"
							rel="noopener noreferrer"
						>
							<Icon icon={icon} />
							<span class="sr-only">{label}</span>
						</a>
					),
				)
			}
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(
				this.querySelector("template")!.content.cloneNode(true),
			);
			const btn = this.querySelector("button")!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById("menu-content")!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add("menu-content");

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute("aria-expanded", expand ? "true" : "false");
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener("click", () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (
				e: MediaQueryList | MediaQueryListEvent,
			) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia("(min-width: 50em)");
			handleViewports(mediaQueries);
			mediaQueries.addEventListener("change", handleViewports);
		}
	}
	customElements.define("menu-button", MenuButton);
</script>

<style>
	nav {
		z-index: 9999;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 500;
		margin-bottom: 3.5rem;
		width: 100%;
	}

	.menu-header {
		display: flex;
		align-items: center;
		width: 100%;
		padding: 1.5rem;
		/* key: push contents to the right at all sizes */
		justify-content: flex-end;
	}

	.socials {
		display: flex;
		flex-wrap: wrap;
		gap: 0.625rem;
		font-size: var(--icon-size, var(--text-xl));
		/* key: occupy remaining space and align to right */
		margin-left: auto;
		justify-content: flex-end;
		width: 100%;
	}

	.social {
		display: flex;
		align-items: center;
		padding: var(--icon-padding, 0.5rem);
		text-decoration: none;
		color: var(--accent-dark);
		transition: color var(--theme-transition);
	}

	.cv-link {
		font-weight: 700;
		color: var(--accent-regular);
		background: var(--gray-999_40);
		border-radius: 1.25rem;
		border: 1px solid var(--accent-regular);
		padding: 0.15em 0.45em;
		margin-left: 0.2em;
		display: flex;
		align-items: center;
		gap: 0.18em;
	}

	.cv-label {
		margin-left: 0.08em;
		font-size: 1em;
		color: var(--accent-regular);
		font-weight: 700;
		letter-spacing: 0.04em;
		padding: 0;
	}

	.social:hover,
	.social:focus {
		color: var(--accent-text-over);
	}

	/* Remove desktop grid overrides that might re-center things */
	@media (min-width: 50em) {
		nav {
			/* keep simple flow; no grid so right-align stays consistent */
			padding: 2.5rem 5rem;
		}
		.menu-header {
			padding: 0;
		}
	}
</style>
